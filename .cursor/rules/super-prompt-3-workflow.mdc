---
description: 
globs: 
alwaysApply: true
---
# Super-Prompt 3: Sprint-Based Development Workflow

This rule outlines the standard sprint-based development workflow for the Rave Yoga Shopify theme project. It emphasizes Git best practices and iterative development for new features and significant changes.

## 1. Sprint Planning & Task Breakdown

*   Before starting development, ensure tasks for the current sprint are well-defined.
*   Each significant piece of work should correspond to a new feature branch.

## 2. Feature Branch Creation

*   Always create a new feature branch from the latest `main` (or `develop`) branch.
*   Naming convention: `feat/descriptive-name` (e.g., `feat/header-mobile-menu`).
    ```bash
    git checkout main
    git pull origin main
    git checkout -b feat/your-feature-name
    ```

## 3. Development Environment Setup

*   Ensure your local environment is correctly configured. Refer to [README.md](mdc:README.md) for detailed setup instructions for Node.js and Shopify CLI.
*   Navigate to the project root directory.
*   Activate the correct Node.js version if using `nvm`:
    ```bash
    nvm use # (Assuming .nvmrc is present or you know the version)
    ```
*   Start the Shopify CLI development server, connecting to the staging store:
    ```bash
    shopify theme dev --store 01bb23-0a.myshopify.com
    ```
    (Replace with the correct store URL if different).

## 4. Implementation & Iteration

*   Implement the feature or changes, focusing on the current sprint's tasks.
*   Refer to key custom files:
    *   Custom CSS: [assets/rave-custom.css](mdc:assets/rave-custom.css)
    *   Custom JS: [assets/rave-custom.js](mdc:assets/rave-custom.js)
    *   CSS Variables: [snippets/rave-variables.liquid](mdc:snippets/rave-variables.liquid)
    *   Global Settings: [config/settings_schema.json](mdc:config/settings_schema.json)
    *   Modified Theme Files: [sections/header.liquid](mdc:sections/header.liquid), [layout/theme.liquid](mdc:layout/theme.liquid)
    *   Localization: [locales/en.default.json](mdc:locales/en.default.json)
*   Log significant decisions and manual Theme Editor configurations in [CUSTOMIZATIONS.md](mdc:CUSTOMIZATIONS.md).
*   Test changes frequently using the local development server.

## 5. Committing and Pushing Changes

*   Make small, atomic commits with clear and descriptive messages.
    ```bash
    git add .
    git commit -m "feat: Implement X feature for Y module"
    ```
*   Regularly push your feature branch to the remote repository:
    ```bash
    git push origin feat/your-feature-name
    ```

## 6. Code Review and Merging

*   Once the feature is complete and tested, create a Pull Request (PR) on GitHub against the `main` branch.
*   Ensure the PR description clearly outlines the changes and any testing steps.
*   Collaborate on code reviews and address any feedback.
*   After approval, merge the PR into `main`.

## 7. Post-Merge & Next Sprint

*   Ensure the `main` branch is stable and deployable.
*   Clean up local and remote feature branches if no longer needed.
*   Prepare for the next sprint cycle.

## Related Workflows

*   For specific feature development guidelines, also see: `workflow-feature` (if this rule provides more specific Git branch/PR details not covered here).
*   For minor fixes, consider: `workflow-quickfix`.
*   For syncing changes from Shopify Admin (if not using GitHub integration): `workflow-content`.
