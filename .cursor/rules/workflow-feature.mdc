---
description: Use this workflow for adding new features or making significant changes to the theme. It prioritizes safety by using separate branches and ensuring code is reviewed before merging into `main`.
globs: 
alwaysApply: false
---
# Workflow: Feature Development (Safe Mode)

Use this workflow for adding new features or making significant changes to the theme. It prioritizes safety by using separate branches and ensuring code is reviewed before merging into `main`.

**Your Role:** Act as a helpful assistant guiding the user through these steps, automating Git commands where possible and safe. Always confirm actions before executing commands that modify the repository state (commit, push, merge).

## Steps:

1.  **Ensure you are on the `main` branch and up-to-date:**
    *   Ask the user: "Are you ready to start a new feature? I'll make sure you're on the latest `main` branch first."
    *   Run `git checkout main`
    *   Run `git pull origin main`

2.  **Create a new feature branch:**
    *   Ask the user for a short, descriptive name for the feature (e.g., "update-header-logo").
    *   Construct the branch name: `feat/<feature-name>` (e.g., `feat/update-header-logo`).
    *   Run `git checkout -b feat/<feature-name>`

3.  **Start Local Development Server:**
    *   Inform the user: "I will now start the local development server for you, connected to your store (`01bb23-0a.myshopify.com`)."
    *   Run `shopify theme dev --store 01bb23-0a.myshopify.com` using the terminal tool.
    *   Instruct the user: "Please **pop this command out** to run in the background in your terminal. This allows us to continue working while the server runs. You can preview your changes live at http://127.0.0.1:9292. You can stop the server later by pressing Ctrl+C in that terminal window."
    *   Assist with coding tasks as requested.

4.  **Commit Changes Regularly:**
    *   Periodically ask: "Have you made changes you'd like to save?"
    *   If yes, ask for a concise commit message describing the changes (e.g., "Style header navigation").
    *   Run `git add .`
    *   Run `git commit -m "feat: <commit-message>"` (prefixing with `feat:` is good practice).

5.  **Push Feature Branch:**
    *   Once the user feels the feature is complete or ready for review, ask: "Ready to push the `feat/<feature-name>` branch to GitHub?"
    *   Run `git push origin feat/<feature-name>`

6.  **Prepare for Review (Pull Request):**
    *   Explain: "Your feature branch is now on GitHub. The next step is usually to create a Pull Request (PR) on GitHub to merge `feat/<feature-name>` into `main`. This allows for code review before the changes go live."
    *   Provide the link to the repository (`https://github.com/datagekko/rave`) and suggest they create the PR there.
    *   *(AI cannot create PRs directly)*

7.  **Merge and Update `main` (Post-Approval):**
    *   **Crucially, DO NOT push directly to `main` from this workflow.**
    *   Explain: "Once the PR is approved and merged on GitHub, you should update your local `main` branch."
    *   Ask: "Has the PR for `feat/<feature-name>` been merged on GitHub?"
    *   If yes:
        *   Run `git checkout main`
        *   Run `git pull origin main`
        *   Inform the user: "Your local `main` branch is now up-to-date."

8.  **Cleanup (Optional):**
    *   Ask: "Would you like to delete the local feature branch `feat/<feature-name>` now that it's merged?"
    *   If yes: Run `git branch -d feat/<feature-name>`

## Safety Checks:

*   **Never push directly to `main`** when using this workflow. Merges should happen via Pull Requests on GitHub.
*   Always `pull` the latest `main` before creating a new feature branch.
*   Confirm with the user before running `git add .`, `git commit`, `git push`, or `git checkout`.
